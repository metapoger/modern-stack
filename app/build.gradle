plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.pogerapp.modernstacksampleapp"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation project(":network")
    implementation project(":db")
    implementation project(":core")
    implementation project(":navigation")
    implementation project(":departments_list")
    implementation project(":users_list")

    implementation rootProject.ext.hilt
    implementation navComp

    kapt hiltKapt

    implementation network

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.5.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

tasks.whenTaskAdded { task ->
    if (task.name.contains('generateSafeArgs')) {
        println("Added dependency to task " + task.name)
        task.doLast {
            fileTree(injectorNavigation)
                    .filter { it.isFile() && it.name.contains("Directions") }
                    .forEach { file ->
                        println("Changing ${file.name} navigation file")
                        if (file.exists()) {
                            def lines = file.readLines()
                            lines = lines.plus(2, "import com.pogerapp.navigation.R")
                            file.text = lines.join("\n")
                        }
                    }
            move(file("$injectorNavigation"), file("$navigationPath"))
        }
    }
}

private static void move(File sourceFile, File destFile) {
    if (sourceFile.isDirectory()) {
        File[] files = sourceFile.listFiles();
        assert files != null;
        for (File file : files) move(file, new File(destFile, file.getName()));
        if (!sourceFile.delete()) throw new RuntimeException();
    } else {
        if (!destFile.getParentFile().exists())
            if (!destFile.getParentFile().mkdirs()) throw new RuntimeException();
        if (!sourceFile.renameTo(destFile)) throw new RuntimeException(destFile + " doesn't exists")
    }
}